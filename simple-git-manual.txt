$ git config --global core.editor vim	# set vim as the default editor for git 

$ cd /path/to/my/project  
$ git init					# initialize a repository in an existing directory.
$ git add ./*				# track all files.
$ git add newfile			# begin tracking a new file.
$ git reset HEAD file		# unstages a file.
$ git commit -m	'initial project version' 	# first commit with a commit message.
$ git commit -a -m 'some message'			# automatically stage every file that is already tracked before doing the commit.
$ git rm unwanted-file	# remove a file from staging area.
$ git rm -f unwanted-file 			# force the removal if the file was modified or was already added to the staging area.
$ git rm --cached unwanted-file		# untrack the file but still keep it on the hard drive.

$ git mv file_from file_to			# rename a file, it's equivalent to:
									# 	$ mv file_from file_to
									#	$ git rm file_from
									#	$ git add file_to

$ git checkout -- file				# unmodify a file -- revert it back to what it looked like as last committed or initially cloned.

$ git status						# to see states of files.
$ git status -s						# short status
$ git diff							# to see what's changed but not staged (without arguments).
$ git diff --staged					# compare staged changes to last commit.
$ git diff --cached					# synonym of --staged

$ git log							# to view the commit history.
									# this lists the commits made in reverse chronological order.
$ git log [-p|--patch]				# shows the difference introduced in each commit.  	
$ git log [-p|--patch] -2			# limits the number of log entries to just two.
$ git log --stat					# shows abbreviated statistics for each commit.
$ git log --pretty=oneline			# shows each commit on a single line.
$ git log --pretty=short			# try these options for yourself.
$ git log --pretty=full			 
$ git log --pretty=fuller			 


$ vim /path/to/my/project/.gitignore	# tell git to ignore files specified


